Given a matrix mat of size N x M where every element is either 'O' or 'X'. Replace all 'O' or a group of 'O' with 'X' that are surrounded by 'X'. A 'O' (or a set of 'O') is considered to be surrounded by 'X' if there are 'X' at locations just below, just above, just left and just right of it.

Example 1:
Input: 
n = 5, m = 4
mat = {{'X', 'X', 'X', 'X'}, 
       {'X', 'O', 'X', 'X'}, 
       {'X', 'O', 'O', 'X'}, 
       {'X', 'O', 'X', 'X'}, 
       {'X', 'X', 'O', 'O'}}
Output: 
ans = {{'X', 'X', 'X', 'X'}, 
       {'X', 'X', 'X', 'X'}, 
       {'X', 'X', 'X', 'X'}, 
       {'X', 'X', 'X', 'X'}, 
       {'X', 'X', 'O', 'O'}}
Explanation: Following the rule the above matrix is the resultant matrix. 

CODE:


class Solution{
    static char[][]temp;
    static char[][] fill(int n, int m, char a[][])
    {
        temp=new char[n][m];
        
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
                temp[i][j]=a[i][j];
        }
        
        for(int i=0; i<m; i++)
        {
            if(temp[0][i]=='O')
                side(temp,0,i);
        }
        
        for(int i=0; i<m; i++)
        {
            if(temp[n-1][i]=='O')
                side(temp,n-1,i);
        }
        
        for(int i=0; i<n; i++)
        {
            if(temp[i][0]=='O')
                side(temp,i,0);
        }
        
        for(int i=0; i<n; i++)
        {
            if(temp[i][m-1]=='O')
                side(temp,i,m-1);
        }
        
        for(int i=0; i<a.length; i++)
        {
            for(int j=0; j<a[0].length; j++)
            {
                if(temp[i][j]=='O')
                    a[i][j]='X';
            }
        }
        
        return a;
    }
    
    static void side(char a[][], int i, int j)
    {
        if(i<0 || i==a.length || j<0 || j==a[0].length || a[i][j]=='X' || a[i][j]=='?')
            return;
            
        if(a[i][j]=='O')
            a[i][j]='?';
            
        side(a, i+1, j);
        side(a, i-1, j);
        side(a, i, j+1);
        side(a, i, j-1);
    }
}
