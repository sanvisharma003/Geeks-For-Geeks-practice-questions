Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.

Example 1:
Input:
4 4
0 1
1 2
2 3
3 3
Output: 1
Explanation: 3 -> 3 is a cycle

CODE:

//{ Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

class DriverClass {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            ArrayList<ArrayList<Integer>> list = new ArrayList<>();
            int V = sc.nextInt();
            int E = sc.nextInt();
            for (int i = 0; i < V; i++)
                list.add(i, new ArrayList<Integer>());
            for (int i = 0; i < E; i++) {
                int u = sc.nextInt();
                int v = sc.nextInt();
                list.get(u).add(v);
            }
            if (new Solution().isCyclic(V, list) == true)
                System.out.println("1");
            else
                System.out.println("0");
        }
    }
}
// } Driver Code Ends


/*Complete the function below*/

class Solution 
{
   // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) 
    {
       boolean[] visited = new boolean[V];
       Set<Integer> in = new HashSet<>(V);
       
       for(int i=0; i<V; i++) 
       {
           if(!visited[i] && isCycle(visited, adj, in, i)) 
            return true;
       }
       
       return false;
   }
   
   boolean isCycle(boolean[] visited,ArrayList<ArrayList<Integer>> adj,Set<Integer> in,int index) 
   {
       visited[index] = true;
       in.add(index);
       ArrayList<Integer> list = adj.get(index);
       
       for (int i=0; i<list.size(); i++) 
       {
           int val = list.get(i);
           if(in.contains(val)) 
            return true;
           if(!visited[val] && isCycle(visited, adj, in, val)) 
            return true;
       }
       
       in.remove(index);
       return false;
   }
}
