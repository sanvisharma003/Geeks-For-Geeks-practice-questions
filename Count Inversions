Given an array of integers. Find the Inversion Count in the array. 
Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0. If an array is sorted in the reverse order then the inversion count is the maximum. Formally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.
 
Example 1:
Input: N = 5, arr[] = {2, 4, 1, 3, 5}
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 has three inversions (2, 1), (4, 1), (4, 3).

CODE 1:

class Solution 
{
    static long mergeSort(long[] arr, long low, long high) 
    {
        long count = 0;
        if (low < high) 
        {
            long mid = (low + high) / 2;
            count += mergeSort(arr, low, mid);
            count += mergeSort(arr, mid + 1, high);
            count += merge(arr, low, mid, high);
        }
        return count;
    }

    static long merge(long[] arr, long low, long mid, long high) 
    {
        ArrayList<Long> temp = new ArrayList<>();
        long left = low;
        long right = mid + 1;
        long count = 0;

        while (left <= mid && right <= high) 
        {
            if (arr[(int) left] <= arr[(int) right]) 
            {
                temp.add(arr[(int) left]);
                left++;
            } 
            else     
            {
                temp.add(arr[(int) right]);
                count += (mid - left + 1);
                right++;
            }
        }
        while (left <= mid) 
        {
            temp.add(arr[(int) left]);
            left++;
        }
        while (right <= high) 
        {
            temp.add(arr[(int) right]);
            right++;
        }
        for (int i = (int) low; i <= high; i++) 
            arr[i] = temp.get(i - (int) low);
        
        return count;
    }

    static long inversionCount(long arr[], long N) 
    {
        return mergeSort(arr, 0, N - 1);
    }
}

CODE 2:

class Solution
{
    static long inversionCount(long arr[], long n)
    {
        // Your Code Here
        long ans=0;
        for(int i=0; i<n; i++)
        {
            for(int j=i+1; j<n; j++)
            {
                if(arr[i] > arr[j])
                    ans++;
            }
        }
        return ans;
    }
}
