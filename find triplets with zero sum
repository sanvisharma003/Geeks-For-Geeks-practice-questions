Given an array arr[] of n integers. Check whether it contains a triplet that sums up to zero. 

Example 1:
Input: n = 5, arr[] = {0, -1, 2, -3, 1}
Output: 1
Explanation: 0, -1 and 1 forms a triplet
with sum equal to 0.

CODE:

//{ Driver Code Starts
import java.util.*;
class Triplets{
	public static void main(String[] args){
		Scanner sc=new Scanner(System.in);
		int t=sc.nextInt();
		while(t-->0){
			int n=sc.nextInt();
			int[] a=new int[n];
			for(int i=0;i<n;i++){
				a[i]=sc.nextInt();
			}
			Solution g=new Solution();
			if(g.findTriplets(a,n))
				System.out.println("1");
			else
				System.out.println("0");
			
		}
	}
}
// } Driver Code Ends


/*Complete the function below*/


class Solution
{
    // arr[]: input array
    // n: size of the array
    //Function to find triplets with zero sum.
	public boolean findTriplets(int arr[] , int n)
    {
        //add code here.
        Arrays.sort(arr);  //sorting -3 -1 0 1 2 
        
        for(int i=0;i<n;i++)
        {
            int low=i+1;
            int high=n-1;
            while(low<high)
            {
                int sum=arr[low]+arr[high]+arr[i];
                if(sum==0)
                   return true;
                   
                if(sum<0)
                    low++;
                    
                if(sum>0)
                    high--;
            }
        }
        return false;
    }
}
