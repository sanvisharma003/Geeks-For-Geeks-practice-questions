Given a link list, modify the list such that all the even numbers appear before all the odd numbers in the modified list. The order of appearance of numbers within each segregation should be the same as that in the original list. NOTE: Don't create a new linked list, instead rearrange the provided one.

Examples:
Input: Linked list: 17->15->8->9->2->4->6
Output: 8->2->4->6->17->15->9
Explaination: 8,2,4,6 are the even numbers so they appear first and 17,15,9 are odd numbers that appear later.

CODE:

class Solution 
{
    Node divide(Node head) 
    {
        Node ep=null, op=null, p=head, ehead=null, ohead=null;
        
        while(p!=null)
        {
            Node nn=new Node(p.data);

            if((nn.data)%2==0)
            {
                if(ehead==null)
                {
                    ehead=nn;
                    ep=ehead;
                }
                else
                {
                    ep.next=nn;
                    ep=ep.next;
                }
            }
            else
            {
                if(ohead==null)
                {
                    ohead=nn;
                    op=ohead;
                }
                else
                {
                    op.next=nn;
                    op=op.next;
                }
            }
            p=p.next;
        }
        
        Node nhead=null;
        if(ehead!=null)
        {
            nhead=ehead;
            while(ehead.next!=null)
                ehead=ehead.next;
            ehead.next=ohead;
        }
        else
            nhead=ohead;

        return nhead;
    }
}
