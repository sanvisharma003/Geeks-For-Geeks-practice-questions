Given a Linked List, where every node represents a sub-linked-list and contains two pointers: (i) a next pointer to the next node, (ii) a bottom pointer to a linked list where this node is head. Each of the sub-linked lists is in sorted order. Flatten the Link List so all the nodes appear in a single level while maintaining the sorted order. Note: The flattened list will be printed using the bottom pointer instead of the next pointer. Look at the printList() function in the driver code for more clarity.

Examples:
Input:
Output:  5-> 7-> 8- > 10 -> 19-> 20-> 22-> 28-> 30-> 35-> 40-> 45-> 50.
Explanation: The resultant linked lists has every node in a single level.(Note: | represents the bottom pointer.)

CODE:


class Solution 
{
    Node flatten(Node root) 
    {
        ArrayList<Integer>al=new ArrayList<>();
        while(root!=null)
        {
            al.add(root.data);
            Node p=root.bottom;
            
            while(p!=null)
            {
                al.add(p.data);
                p=p.bottom;
            }
            root=root.next;
        }
        
        Collections.sort(al);
        Node p=null;
        
        for(int i=0; i<al.size(); i++)
        {
            Node nn = new Node(al.get(i));
            if(root==null)
            {
                root=nn;
                p=root;
            }
            else
            {
                p.bottom=nn;
                p=p.bottom;
            }
        }
        
        return root;
    }
}
