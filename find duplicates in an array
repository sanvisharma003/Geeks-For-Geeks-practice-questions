Given an array a[] of size N which contains elements from 0 to N-1, you need to find all the elements occurring more than once in the given array.
Note: The extra space is only for the array to be returned.
Try and perform all operations within the provided array. 

Example 1:
Input:
N = 4
a[] = {0,3,1,2}
Output: -1
Explanation: N=4 and all elements from 0
to (N-1 = 3) are present in the given
array. Therefore output is -1.

CODE:

//{ Driver Code Starts
import java.io.*;
import java.util.*;
import java.util.Map.Entry;

class GFG {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int n = sc.nextInt();
            int[] a = new int[n];
            for (int i = 0; i < n; i++) a[i] = sc.nextInt();
            Solution g = new Solution();
            ArrayList<Integer> ans = g.duplicates(a, n);
            for (Integer val : ans) System.out.print(val + " ");
            System.out.println();
        }
    }
}

// } Driver Code Ends


class Solution {
    public static ArrayList<Integer> duplicates(int arr[], int n) 
    {
        ArrayList<Integer> al = new ArrayList<Integer>();

        HashMap<Integer, Integer> map=new HashMap<>();
        
        for(int i=0;i<n;i++)
        {
            if(map.containsKey(arr[i]))
                map.put(arr[i], map.get(arr[i])+1);
            //key,value(key+1)
            else
                map.put(arr[i], 1);
            //putting key,value
        }

        for(int key:map.keySet())
            {
                if(map.get(key)>1)
                al.add(key);
            }
            
            Collections.sort(al);
            if(al.isEmpty())
            al.add(-1);
            
            return al;

        
    }
}
