Given an array of n distinct elements. Find the minimum number of swaps required to sort the array in strictly increasing order.

Example 1:
Input:
nums = {2, 8, 5, 4}
Output: 1
Explanation: swap 8 with 4.

CODE 1:

public void swap(int[] arr, int x, int y)
    {
        int t= arr[x];
        arr[x]=arr[y];
        arr[y]=t;
    }
    
    public int minSwaps(int nums[])
    {
        int count=0;
        int n=nums.length;
        HashMap<Integer, Integer> map= new HashMap<>();
        for(int x=0;x<n;x++)
            map.put(nums[x],x);
        Arrays.sort(nums);
        
        for(int x=0; x<n; x++)
        {
            if(x == map.get(nums[x]))
                continue;
            else
            {
                count++;
                swap(nums,x,map.get(nums[x]));
                x--;
            }
        }
        return count;
    }

CODE 2:

class Solution
{
    //Function to find the minimum number of swaps required to sort the array.
    public int minSwaps(int nums[])
    {
        int[]copy=new int[nums.length];
        for(int i=0; i<nums.length; i++)
            copy[i]=nums[i];
            
        Arrays.sort(nums);
        
        int ans=0;
        for(int i=0; i<nums.length; i++)
        {
            if(nums[i]==copy[i])
                continue;
            else
            {
                int pl=linear(copy, nums[i]);
                swap(copy, i, pl);
                ans++;
            }
        }            
        return ans;
    }
    
    private int linear(int[]arr, int tar)
    {
        for(int i=0; i<arr.length; i++)
        {
            if(arr[i]==tar)
                return i;
        }
        return -1;
    }
    
    private void swap(int[]arr, int a, int b)
    {
        int temp=arr[a];
        arr[a]=arr[b];
        arr[b]=temp;
    }
}
